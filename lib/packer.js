// Generated by CoffeeScript 1.6.1

/*
This class pack all together with layout

Тут у нас и происходит встройка данных с 
путями и кодом файлов в шаблон, эмулирующий require и export
*/


(function() {
  var Packer, async, _,
    __hasProp = {}.hasOwnProperty;

  _ = require('lodash');

  async = require('async');

  Packer = (function() {

    function Packer(_bundle_processor_, _options_) {
      var _ref, _ref1;
      this._bundle_processor_ = _bundle_processor_;
      this._options_ = _options_ != null ? _options_ : {};
      this._do_logging_ = (this._options_.log != null) && this._options_.log === true && ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) ? true : false;
      this._settings_ = {
        strict: (_ref = this._options_.strict) != null ? _ref : true,
        inject: (_ref1 = this._options_.inject) != null ? _ref1 : true
      };
    }

    /*
    This method create browser package with given cofiguration
    */


    Packer.prototype.buldPackage = function(package_name, package_config, main_cb) {
      var _this = this;
      return this._bundle_processor_.buildAll(package_config, function(err, package_code) {
        if (err) {
          return main_cb(err);
        }
        return main_cb(null, _this._assemblePackage(package_name, package_code));
      });
    };

    /*
    This method assemble result .js file from bundleset
    */


    Packer.prototype._assemblePackage = function(package_name, package_code) {
      var bundle_index, bundle_name, code, env_body, env_header, name, result, source_index, strict_str, var_prefix, _i, _len, _ref, _ref1, _ref2;
      _ref = this._buildEnvironment(package_code.environment_list, package_code.members), env_header = _ref[0], env_body = _ref[1];
      strict_str = this._settings_.strict ? '\n \'use strict\';' : '';
      result = ("(function() {" + strict_str + "\n") + env_header + this._getHeader() + ("\n    dependencies = " + (JSON.stringify(package_code.dependencies_tree)) + ";\n");
      result += "    sources = {\n";
      source_index = 0;
      _ref1 = package_code.source_code;
      for (name in _ref1) {
        if (!__hasProp.call(_ref1, name)) continue;
        code = _ref1[name];
        result += source_index++ === 0 ? "" : ",\n";
        result += JSON.stringify(name);
        result += ": function(exports, module, require) {" + code + "}";
      }
      result += "};\n";
      result += env_body;
      var_prefix = this._settings_.inject ? 'this.' : 'var ';
      result += "\n/* bundle export */\n" + var_prefix + package_name + " = {\n";
      bundle_index = 0;
      _ref2 = package_code.bundle_list;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        bundle_name = _ref2[_i];
        result += bundle_index++ === 0 ? "" : ",\n";
        result += JSON.stringify(bundle_name);
        result += ": require(" + (JSON.stringify(package_code.members[bundle_name])) + ")";
      }
      result += "};\n";
      return result + this._getFooter();
    };

    /*
    This method build "environment" - local for package variables
    They immitate node.js internal gobal things (like process.nextTick, f.e.)
    */


    Packer.prototype._buildEnvironment = function(names, paths) {
      var body, header;
      if (!names.length) {
        return ['', ''];
      }
      header = "/* this is environment vars */\nvar " + names.join(', ') + ';\n';
      body = _.reduce(names, function(memo, val) {
        return memo += "" + val + " = require(" + (JSON.stringify(paths[val])) + ");\n";
      }, '');
      return [header, body];
    };

    /*
    This is header for our browser package
    */


    Packer.prototype._getHeader = function() {
      return "    \nvar dependencies, name_resolver, require, sources, _this = this;\n\nname_resolver = function(parent, name) {\n  if (dependencies[parent] == null) {\n    throw Error(\"no dependencies list for parent |\" + parent + \"|\");\n  }\n  if (dependencies[parent][name] == null) {\n    throw Error(\"no one module resolved, name - |\" + name + \"|, parent - |\" + parent + \"|\");\n  }\n  return dependencies[parent][name];\n};\nrequire = function(name, parent) {\n  var exports, module, module_source, resolved_name, _ref;\n  if (!(module_source = sources[name])) {\n    resolved_name = name_resolver(parent, name);\n    if (!(module_source = sources[resolved_name])) {\n      throw Error(\"can`t find module source code: original_name - |\" + name + \"|, resolved_name - |\" + resolved_name + \"|\");\n    }\n  }\n  module_source.call(_this,exports = {}, module = {}, function(mod_name) {\n    return require(mod_name, resolved_name != null ? resolved_name : name);\n  });\n  return (_ref = module.exports) != null ? _ref : exports;\n};";
    };

    /*
    This is footer of code wrapper
    */


    Packer.prototype._getFooter = function() {
      return "}).call(this);";
    };

    return Packer;

  })();

  module.exports = Packer;

}).call(this);
